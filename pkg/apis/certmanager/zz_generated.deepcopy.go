// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package certmanager

import (
	reflect "reflect"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	SchemeBuilder.Register(RegisterDeepCopies)
}

// RegisterDeepCopies adds deep-copy functions to the given scheme. Public
// to allow building arbitrary schemes.
func RegisterDeepCopies(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedDeepCopyFuncs(
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_ACMEConfig, InType: reflect.TypeOf(&ACMEConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_ACMEDNSConfig, InType: reflect.TypeOf(&ACMEDNSConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_ACMEDNSConfigCloudDNS, InType: reflect.TypeOf(&ACMEDNSConfigCloudDNS{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_ACMEIssuer, InType: reflect.TypeOf(&ACMEIssuer{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_Certificate, InType: reflect.TypeOf(&Certificate{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_CertificateList, InType: reflect.TypeOf(&CertificateList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_CertificateSpec, InType: reflect.TypeOf(&CertificateSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_CertificateStatus, InType: reflect.TypeOf(&CertificateStatus{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_Issuer, InType: reflect.TypeOf(&Issuer{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_IssuerList, InType: reflect.TypeOf(&IssuerList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_IssuerSpec, InType: reflect.TypeOf(&IssuerSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_certmanager_IssuerStatus, InType: reflect.TypeOf(&IssuerStatus{})},
	)
}

func DeepCopy_certmanager_ACMEConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMEConfig)
		out := out.(*ACMEConfig)
		*out = *in
		return nil
	}
}

func DeepCopy_certmanager_ACMEDNSConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMEDNSConfig)
		out := out.(*ACMEDNSConfig)
		*out = *in
		if in.CloudDNS != nil {
			in, out := &in.CloudDNS, &out.CloudDNS
			*out = new(ACMEDNSConfigCloudDNS)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_certmanager_ACMEDNSConfigCloudDNS(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMEDNSConfigCloudDNS)
		out := out.(*ACMEDNSConfigCloudDNS)
		*out = *in
		return nil
	}
}

func DeepCopy_certmanager_ACMEIssuer(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMEIssuer)
		out := out.(*ACMEIssuer)
		*out = *in
		return nil
	}
}

func DeepCopy_certmanager_Certificate(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Certificate)
		out := out.(*Certificate)
		*out = *in
		if newVal, err := c.DeepCopy(&in.ObjectMeta); err != nil {
			return err
		} else {
			out.ObjectMeta = *newVal.(*v1.ObjectMeta)
		}
		if newVal, err := c.DeepCopy(&in.Spec); err != nil {
			return err
		} else {
			out.Spec = *newVal.(*CertificateSpec)
		}
		return nil
	}
}

func DeepCopy_certmanager_CertificateList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*CertificateList)
		out := out.(*CertificateList)
		*out = *in
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]Certificate, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err != nil {
					return err
				} else {
					(*out)[i] = *newVal.(*Certificate)
				}
			}
		}
		return nil
	}
}

func DeepCopy_certmanager_CertificateSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*CertificateSpec)
		out := out.(*CertificateSpec)
		*out = *in
		if in.Domains != nil {
			in, out := &in.Domains, &out.Domains
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.ACME != nil {
			in, out := &in.ACME, &out.ACME
			*out = new(ACMEConfig)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_certmanager_CertificateStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*CertificateStatus)
		out := out.(*CertificateStatus)
		*out = *in
		return nil
	}
}

func DeepCopy_certmanager_Issuer(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Issuer)
		out := out.(*Issuer)
		*out = *in
		if newVal, err := c.DeepCopy(&in.ObjectMeta); err != nil {
			return err
		} else {
			out.ObjectMeta = *newVal.(*v1.ObjectMeta)
		}
		if newVal, err := c.DeepCopy(&in.Spec); err != nil {
			return err
		} else {
			out.Spec = *newVal.(*IssuerSpec)
		}
		return nil
	}
}

func DeepCopy_certmanager_IssuerList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*IssuerList)
		out := out.(*IssuerList)
		*out = *in
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]Issuer, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err != nil {
					return err
				} else {
					(*out)[i] = *newVal.(*Issuer)
				}
			}
		}
		return nil
	}
}

func DeepCopy_certmanager_IssuerSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*IssuerSpec)
		out := out.(*IssuerSpec)
		*out = *in
		if in.ACME != nil {
			in, out := &in.ACME, &out.ACME
			*out = new(ACMEIssuer)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_certmanager_IssuerStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*IssuerStatus)
		out := out.(*IssuerStatus)
		*out = *in
		return nil
	}
}
