// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	reflect "reflect"
)

func init() {
	SchemeBuilder.Register(RegisterDeepCopies)
}

// RegisterDeepCopies adds deep-copy functions to the given scheme. Public
// to allow building arbitrary schemes.
func RegisterDeepCopies(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedDeepCopyFuncs(
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_ACMECertificateConfig, InType: reflect.TypeOf(&ACMECertificateConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_ACMECertificateDNS01Config, InType: reflect.TypeOf(&ACMECertificateDNS01Config{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_ACMECertificateDomainConfig, InType: reflect.TypeOf(&ACMECertificateDomainConfig{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_ACMECertificateHTTP01Config, InType: reflect.TypeOf(&ACMECertificateHTTP01Config{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_ACMEDomainAuthorization, InType: reflect.TypeOf(&ACMEDomainAuthorization{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_ACMEIssuer, InType: reflect.TypeOf(&ACMEIssuer{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_ACMEIssuerDNS01Config, InType: reflect.TypeOf(&ACMEIssuerDNS01Config{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_ACMEIssuerDNS01Provider, InType: reflect.TypeOf(&ACMEIssuerDNS01Provider{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS, InType: reflect.TypeOf(&ACMEIssuerDNS01ProviderCloudDNS{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_Certificate, InType: reflect.TypeOf(&Certificate{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_CertificateACMEStatus, InType: reflect.TypeOf(&CertificateACMEStatus{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_CertificateList, InType: reflect.TypeOf(&CertificateList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_CertificateSpec, InType: reflect.TypeOf(&CertificateSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_CertificateStatus, InType: reflect.TypeOf(&CertificateStatus{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_Issuer, InType: reflect.TypeOf(&Issuer{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_IssuerList, InType: reflect.TypeOf(&IssuerList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_IssuerSpec, InType: reflect.TypeOf(&IssuerSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1alpha1_IssuerStatus, InType: reflect.TypeOf(&IssuerStatus{})},
	)
}

func DeepCopy_v1alpha1_ACMECertificateConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMECertificateConfig)
		out := out.(*ACMECertificateConfig)
		*out = *in
		if in.Config != nil {
			in, out := &in.Config, &out.Config
			*out = make([]ACMECertificateDomainConfig, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err != nil {
					return err
				} else {
					(*out)[i] = *newVal.(*ACMECertificateDomainConfig)
				}
			}
		}
		return nil
	}
}

func DeepCopy_v1alpha1_ACMECertificateDNS01Config(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMECertificateDNS01Config)
		out := out.(*ACMECertificateDNS01Config)
		*out = *in
		return nil
	}
}

func DeepCopy_v1alpha1_ACMECertificateDomainConfig(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMECertificateDomainConfig)
		out := out.(*ACMECertificateDomainConfig)
		*out = *in
		if in.Domains != nil {
			in, out := &in.Domains, &out.Domains
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.HTTP01 != nil {
			in, out := &in.HTTP01, &out.HTTP01
			if newVal, err := c.DeepCopy(*in); err != nil {
				return err
			} else {
				*out = newVal.(*ACMECertificateHTTP01Config)
			}
		}
		if in.DNS01 != nil {
			in, out := &in.DNS01, &out.DNS01
			*out = new(ACMECertificateDNS01Config)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_v1alpha1_ACMECertificateHTTP01Config(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMECertificateHTTP01Config)
		out := out.(*ACMECertificateHTTP01Config)
		*out = *in
		if in.IngressClass != nil {
			in, out := &in.IngressClass, &out.IngressClass
			*out = new(string)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_v1alpha1_ACMEDomainAuthorization(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMEDomainAuthorization)
		out := out.(*ACMEDomainAuthorization)
		*out = *in
		return nil
	}
}

func DeepCopy_v1alpha1_ACMEIssuer(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMEIssuer)
		out := out.(*ACMEIssuer)
		*out = *in
		if in.DNS01 != nil {
			in, out := &in.DNS01, &out.DNS01
			if newVal, err := c.DeepCopy(*in); err != nil {
				return err
			} else {
				*out = newVal.(*ACMEIssuerDNS01Config)
			}
		}
		return nil
	}
}

func DeepCopy_v1alpha1_ACMEIssuerDNS01Config(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMEIssuerDNS01Config)
		out := out.(*ACMEIssuerDNS01Config)
		*out = *in
		if in.Providers != nil {
			in, out := &in.Providers, &out.Providers
			*out = make([]ACMEIssuerDNS01Provider, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err != nil {
					return err
				} else {
					(*out)[i] = *newVal.(*ACMEIssuerDNS01Provider)
				}
			}
		}
		return nil
	}
}

func DeepCopy_v1alpha1_ACMEIssuerDNS01Provider(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMEIssuerDNS01Provider)
		out := out.(*ACMEIssuerDNS01Provider)
		*out = *in
		if in.CloudDNS != nil {
			in, out := &in.CloudDNS, &out.CloudDNS
			*out = new(ACMEIssuerDNS01ProviderCloudDNS)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ACMEIssuerDNS01ProviderCloudDNS)
		out := out.(*ACMEIssuerDNS01ProviderCloudDNS)
		*out = *in
		return nil
	}
}

func DeepCopy_v1alpha1_Certificate(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Certificate)
		out := out.(*Certificate)
		*out = *in
		if newVal, err := c.DeepCopy(&in.ObjectMeta); err != nil {
			return err
		} else {
			out.ObjectMeta = *newVal.(*v1.ObjectMeta)
		}
		if newVal, err := c.DeepCopy(&in.Spec); err != nil {
			return err
		} else {
			out.Spec = *newVal.(*CertificateSpec)
		}
		if newVal, err := c.DeepCopy(&in.Status); err != nil {
			return err
		} else {
			out.Status = *newVal.(*CertificateStatus)
		}
		return nil
	}
}

func DeepCopy_v1alpha1_CertificateACMEStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*CertificateACMEStatus)
		out := out.(*CertificateACMEStatus)
		*out = *in
		if in.Authorizations != nil {
			in, out := &in.Authorizations, &out.Authorizations
			*out = make([]ACMEDomainAuthorization, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

func DeepCopy_v1alpha1_CertificateList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*CertificateList)
		out := out.(*CertificateList)
		*out = *in
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]Certificate, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err != nil {
					return err
				} else {
					(*out)[i] = *newVal.(*Certificate)
				}
			}
		}
		return nil
	}
}

func DeepCopy_v1alpha1_CertificateSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*CertificateSpec)
		out := out.(*CertificateSpec)
		*out = *in
		if in.Domains != nil {
			in, out := &in.Domains, &out.Domains
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.ACME != nil {
			in, out := &in.ACME, &out.ACME
			if newVal, err := c.DeepCopy(*in); err != nil {
				return err
			} else {
				*out = newVal.(*ACMECertificateConfig)
			}
		}
		return nil
	}
}

func DeepCopy_v1alpha1_CertificateStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*CertificateStatus)
		out := out.(*CertificateStatus)
		*out = *in
		if in.ACME != nil {
			in, out := &in.ACME, &out.ACME
			if newVal, err := c.DeepCopy(*in); err != nil {
				return err
			} else {
				*out = newVal.(*CertificateACMEStatus)
			}
		}
		return nil
	}
}

func DeepCopy_v1alpha1_Issuer(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Issuer)
		out := out.(*Issuer)
		*out = *in
		if newVal, err := c.DeepCopy(&in.ObjectMeta); err != nil {
			return err
		} else {
			out.ObjectMeta = *newVal.(*v1.ObjectMeta)
		}
		if newVal, err := c.DeepCopy(&in.Spec); err != nil {
			return err
		} else {
			out.Spec = *newVal.(*IssuerSpec)
		}
		return nil
	}
}

func DeepCopy_v1alpha1_IssuerList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*IssuerList)
		out := out.(*IssuerList)
		*out = *in
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]Issuer, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err != nil {
					return err
				} else {
					(*out)[i] = *newVal.(*Issuer)
				}
			}
		}
		return nil
	}
}

func DeepCopy_v1alpha1_IssuerSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*IssuerSpec)
		out := out.(*IssuerSpec)
		*out = *in
		if in.ACME != nil {
			in, out := &in.ACME, &out.ACME
			if newVal, err := c.DeepCopy(*in); err != nil {
				return err
			} else {
				*out = newVal.(*ACMEIssuer)
			}
		}
		return nil
	}
}

func DeepCopy_v1alpha1_IssuerStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*IssuerStatus)
		out := out.(*IssuerStatus)
		*out = *in
		return nil
	}
}
